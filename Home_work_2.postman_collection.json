{
	"info": {
		"_postman_id": "7740b1f9-f01f-405b-bd15-7287285ed89d",
		"name": "Home_work_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24992239"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{ip_port}}/first",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json.\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req_f = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"console.log ('name = ' + req_f.name)\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"console.log ('age = ' + req_f.age)\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"console.log ('salary = ' + req_f.salary)\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" let req_name = req_f.name\r",
							" console.log ('req_name = ' + req_f.name)\r",
							" let resp_name = resp_f.name\r",
							" console.log ('resp_name = ' + resp_f.name)\r",
							"\r",
							"\r",
							" pm.test(\"Check_name\", function () {\r",
							"     pm.expect(req_name).to.eql(resp_name);\r",
							" });\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary\r",
							"let resp_salary = +resp_f.salary\r",
							"\r",
							"console.log('req_salary = ' + req_f.salary)\r",
							"console.log('resp_salary = ' + resp_f.salary)\r",
							"\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log('family= ' + JSON.stringify(resp_f.family))\r",
							"let u_salary_1_5_year = +resp_f.family.u_salary_1_5_year\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(resp_salary * 4).to.eql(u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Criss",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_3",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос\r",
							"//2. Статус код 200\r",
							"//3. Спарсить response body в json\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"//Спарсить request\r",
							"let req_f = request.data;\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name;\r",
							"console.log ('req_name = ' + req_f.name);\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = +req_f.age;\r",
							"console.log ('req_age = ' + req_f.age);\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +req_f.salary;\r",
							"console.log ('req_salary = ' + req_f.salary);\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log ('family= ' + JSON.stringify(resp_f.family))\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"let resp_dog_name = resp_f.family.pets.dog.name;\r",
							"\r",
							"pm.test(\"Check_dog_name\", function () {\r",
							"     pm.expect(resp_f).have.to.property(\"name\");\r",
							" });\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"let resp_dog_age = +resp_f.family.pets.dog.age;\r",
							"\r",
							"pm.test(\"Check_dog_age\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"age\");\r",
							" });\r",
							" \r",
							"\r",
							"//Проверить, что параметр name имеет значение Luky\r",
							" pm.test(\"Check_name_Luky\", function () {\r",
							"     pm.expect(resp_dog_name).to.eql('Luky');\r",
							" });\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check_dog_age\", function () {\r",
							"    pm.expect(resp_dog_age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Criss",
							"type": "text"
						},
						{
							"key": "age",
							"value": "35",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/object_info_3?name=Criss&age=35&salary=1000",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Criss"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"//Спарсить request\r",
							"let req_f = request.data;\r",
							"\r",
							"//Спарсить response body в json\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req_f.name;\r",
							"let resp_name = resp_f.name;\r",
							"console.log ('req_name = ' + req_f.name);\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"let req_salary = +req_f.salary\r",
							"console.log ('req_salary = ' + req_f.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"let resp_salary_0 = +resp_f.salary[0]\r",
							"console.log ('resp_salary_0 = ' + resp_f.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"let resp_salary_1 = +resp_f.salary[1]\r",
							"console.log ('resp_salary_1 = ' + resp_f.salary[1]);\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_2 = +req_f.salary*2\r",
							"console.log ('req_salary_2 = ' + req_f.salary*2);\r",
							"\r",
							"pm.test(\"Check_salary*2\", function () {\r",
							"    pm.expect(req_salary_2).to.eql(resp_salary_1);\r",
							"});\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"let resp_salary_2 = +resp_f.salary[2]\r",
							"console.log ('resp_salary_2 = ' + resp_f.salary[2]);\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let req_salary_3 = +req_f.salary*3\r",
							"console.log ('req_salary_3 = ' + req_f.salary*3);\r",
							"\r",
							"pm.test(\"Check_salary*3\", function () {\r",
							"    pm.expect(req_salary_3).to.eql(resp_salary_2);\r",
							"});\r",
							"\r",
							"\r",
							"// console.log ('req_name = ' + req_f.age);\r",
							"// console.log ('salary= ' + JSON.stringify(resp_f.salary))\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check_salary\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary_0);\r",
							"});\r",
							"\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let salary = ['1000', '2000', '3000']\r",
							"salary.forEach(element => console.log(element))\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"//4. Отправить запрос\r",
							"//5. Статус код 200\r",
							"//6. Спарсить response body в json\r",
							"//7. Спарсить request\r",
							"\r",
							"let req_f = request.data;\r",
							"let resp_f = pm.response.json();\r",
							"\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_start_qa_salary\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_property_salary_after_6_months\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_json_response\", function () {\r",
							"    pm.expect(resp_f).have.to.property(\"person\");\r",
							"});\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"let req_salary= +req_f.salary\r",
							"console.log( req_salary);\r",
							"let resp_start_qa_salary = resp_f.start_qa_salary\r",
							"console.log(resp_start_qa_salary);\r",
							"\r",
							" pm.test(\"Check_start_qa_salary_eql\", function () {\r",
							"     pm.expect(req_salary).to.eql(resp_start_qa_salary);\r",
							" });\r",
							"\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"let req_salary= +req_f.salary*2\r",
							"console.log( req_salary);\r",
							"let resp_qa_salary_after_6_months = resp_f.qa_salary_after_6_months\r",
							"console.log(resp_qa_salary_after_6_months);\r",
							"\r",
							" pm.test(\"Check_salary_after_6_months\", function () {\r",
							"     pm.expect(req_salary).to.eql(resp_qa_salary_after_6_months);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"let req_salary= +req_f.salary*2.7\r",
							"console.log( req_salary);\r",
							"let qa_salary_after_12_months = resp_f.qa_salary_after_12_months\r",
							"console.log(qa_salary_after_12_months);\r",
							"\r",
							" pm.test(\"Check_salary_after_12_months\", function () {\r",
							"     pm.expect(req_salary).to.eql(qa_salary_after_12_months);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_salary= +req_f.salary*3.3\r",
							"console.log( req_salary);\r",
							"let qa_salary_after_1_5_year = resp_f['qa_salary_after_1.5_year'];\r",
							"console.log(qa_salary_after_1_5_year);\r",
							"\r",
							"pm.test(\"Check_salary_after_12_months\", function () {\r",
							"   pm.expect(req_salary).to.eql(qa_salary_after_1_5_year);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_salary= +req_f.salary*3.8\r",
							"console.log( req_salary);\r",
							"let qa_salary_after_3_5_years = resp_f['qa_salary_after_3.5_years'];\r",
							"console.log(qa_salary_after_3_5_years);\r",
							"\r",
							" pm.test(\"Check_salary_after_3_5_years\", function () {\r",
							"     pm.expect(req_salary).to.eql(qa_salary_after_3_5_years);\r",
							" });\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							" let req_salary = +req_f.salary\r",
							" console.log( req_salary);\r",
							" let u_name = +resp_f.person.u_name[1]\r",
							" console.log(u_name);\r",
							"\r",
							" pm.test(\"Check_u_name\", function () {\r",
							"     pm.expect(req_salary).to.eql(u_name);\r",
							" });\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							" let req_age = +req_f.age\r",
							" console.log(req_age);\r",
							" let resp_u_age = +resp_f.person.u_age\r",
							" console.log(resp_u_age);\r",
							"\r",
							" pm.test(\"Check_u_age\", function () {\r",
							"     pm.expect(req_age).to.eql(resp_u_age);\r",
							" });\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							" let req_u_salary_5_years = +req_f.salary*4.2\r",
							" console.log(req_u_salary_5_years);\r",
							" let resp_u_salary_5_years = +resp_f.person.u_salary_5_years\r",
							" console.log(resp_u_salary_5_years);\r",
							"\r",
							" pm.test(\"Check_u_salary_5_years\", function () {\r",
							"     pm.expect(req_u_salary_5_years).to.eql(resp_u_salary_5_years);\r",
							" });\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"let person = ['Criss', '1000', '35']\r",
							"person.forEach(element => console.log(element))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{ip_port}}/user_info_2?name={{name}}&age={{age}}&salary={{salary}}",
					"host": [
						"{{ip_port}}"
					],
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		}
	]
}